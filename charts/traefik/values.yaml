traefik:
  globalArguments:
    - "--global.checknewversion"
  additionalArguments:
    - "--ping"

  logs:
    general:
      format: json
      level: INFO
    access:
      format: json
      enabled: false

  deployment:
    replicas: 2

  service:
    annotations:
      # Signals OTC to forward the real client IP instead of the ELB IP(s).
      "kubernetes.io/elb.transparent-client-ip": "true"
    spec:
      externalTrafficPolicy: Cluster

  providers:
    kubernetesCRD:
      enabled: true
      allowExternalNameServices: true
      allowCrossNamespace: true
    kubernetesIngress:
      enabled: true
      allowExternalNameServices: true
      publishedService:
        enabled: true

  ingressClass:
    enabled: true
    isDefaultClass: true

  tlsOptions:
    default:
      minVersion: VersionTLS13

  tlsStore:
    default:
      defaultCertificate:
        secretName: "traefik-default-cert"

  affinity:
    #Do not place pod's on same node to prevent a downtime when a node fails.
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: '{{ template "traefik.name" . }}'
              app.kubernetes.io/instance: '{{ .Release.Name }}-{{ include "traefik.namespace" . }}'
          topologyKey: kubernetes.io/hostname

  metrics:
    prometheus:
      serviceMonitor:
        enabled: true
      service:
        enabled: true

  ingressRoute:
    dashboard:
      enabled: true
      entryPoints:
        - traefik
        - websecure
      middlewares:
        - name: oidc-forward-auth
          namespace: routing

    healthcheck:
      # If you want external uptime checks, this is the flag you would have to enable.
      # If you enabled this, you will expose /ping !without! Authentication.
      # While not dangerous on its own, we want the unsecured exposing of any path being a conscious decision and not done implicitly.
      enabled: false
      entryPoints:
        - traefik
        - websecure

defaultCert:
  enabled: true
  # -- (array) Required, set the domains you want to request, i.e.
  #  dnsNames:
  #  - "dev.example.com" # Required if you also want to serve on the "root" url
  #  - "*.dev.example.com" # If you want wildcard certificates, you have to do an DNS01 Request for the certificate
  dnsNames:

  # -- Defaults are 'letsencrypt' for HTTP01 and 'letsencrypt-dns' for DNS01
  # For wildcard-certificates you need to use the DNS01 Challenge
  issuerName: "letsencrypt-dns"
