global:
  prometheus:
    # -- Required, replace it with your host address
    host:
  grafana:
    # -- Required, replace it with your host address
    host:
  alertmanager:
    # -- Required, replace it with your host address
    host:

prometheusStack:
  #Config if you are behind an oauth proxy
  ingress:
    prometheus:
      enabled: true
      host: "{{$.Values.global.prometheus.host}}"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.middlewares: routing-oidc-forward-auth@kubernetescrd
      tls:
        - hosts:
            - "{{$.Values.global.prometheus.host}}"
    grafana:
      enabled: true
      className: "traefik"
      host: "{{$.Values.global.grafana.host}}"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.middlewares: routing-oidc-forward-auth@kubernetescrd
      tls:
        - hosts:
            - "{{$.Values.global.grafana.host}}"
    alertmanager:
      enabled: true
      host: "{{$.Values.global.alertmanager.host}}"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.middlewares: "{{.Release.Namespace}}-strip-prefix-{{ .Release.Name }}@kubernetescrd, routing-oidc-forward-auth@kubernetescrd"
      tls:
        - hosts:
            - "{{$.Values.global.alertmanager.host}}"
  kubeProxy:
    enabled: false
  kubeScheduler:
    enabled: false
  kubelet:
    enabled: true
  nameOverride: prometheus-stack
  kubeControllerManager:
    enabled: false

  defaultRules:
    create: true
    disabled:
      NodeClockNotSynchronising: true #CCE does not give access to that
      KubeletDown: true  #CCE does not give access to that
      InfoInhibitor: true #It is spamming
    rules:
      alertmanager: true
      etcd: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverError: true
      kubeApiserverSlos: true
      kubePrometheusGeneral: true
      kubePrometheusNodeAlerting: true
      kubePrometheusNodeRecording: true
      kubernetesAbsent: true
      kubernetesApps: true
      kubernetesResources: false #We need to customize the CPUThrottlingHigh Alert and increase the CPU to X; see also kubernetes-resources.yaml line 151
      kubernetesStorage: true
      kubernetesSystem: true
      kubeStateMetrics: true
      network: true
      node: true
      prometheus: true
      prometheusOperator: true
      time: true
  prometheus:
    prometheusSpec:
      externalUrl: https://{{$.Values.global.prometheus.host}}/prometheus
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      podMonitorSelector: null
      routePrefix: "/prometheus"
      resources:
        requests:
          memory: "2255Mi"
          cpu: "60m"
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 30G
  prometheusOperator:
    enabled: true
    tls:
      enabled: false
    admissionWebhooks:
      enabled: false
      patch:
        enabled: false
  grafana:
    serviceMonitor:
      path: "/grafana/metrics"
    # -- Required
    adminPassword:
    grafana.ini:
      server:
        serve_from_sub_path: true
        root_url: https://{{$.Values.global.grafana.host}}/grafana
      auth:
        disable_login_form: false
      auth.basic:
        enabled: true
      security:
        disable_initial_admin_creation: false

  alertmanager:
    config:
      global:
        resolve_timeout: 5m
        slack_api_url: "http://myhost.local"
      route:
        group_by: [ 'job' ]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        routes:
          - receiver: 'null'
            match:
              alertname: Watchdog
          - receiver: 'slack'
            continue: true
      receivers:
        - name: 'null'
        - name: 'slack'
          slack_configs:
            - channel: 'infrastructure'
              link_names: true
              send_resolved: true
              title_link: '{{ (index .Alerts 0).GeneratorURL }}'
              title: '{{ (index .Alerts 0).GeneratorURL | reReplaceAll "(.*)prometheus(.*)" "$1"}}  {{ (index .Alerts 0).Annotations.summary}}'
              text: >-
                {{ range .Alerts }}
                  *Description:* {{ .Annotations.description }}
                  *Details:*
                  {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                  {{ end }}
                {{ end }}
      templates:
        - /etc/alertmanager/config/*.tmpl
    alertmanagerSpec:
      routePrefix: "/alertmanager"
      resources:
        requests:
          memory: "100Mi"
          cpu: "5m"
