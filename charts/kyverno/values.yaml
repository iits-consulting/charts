kyverno:

  features:
    policyExceptions:
      enabled: true
      namespace: "*"
    logging:
      format: json

  admissionController:
    replicas: 2
    serviceMonitor:
      enabled: true
    rbac:
      clusterRole:
        extraResources:
          - apiGroups:
              - ''
            resources:
              - secrets
            verbs:
              - list
              - get
              - create
              - update
              - delete
              - patch

  backgroundController:
    serviceMonitor:
      enabled: true
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 300m
        memory: 512Mi
    rbac:
      clusterRole:
        extraResources:
          - apiGroups:
              - ''
            resources:
              - pods
            verbs:
              - create
              - update
              - delete
              - patch
          - apiGroups:
              - ''
            resources:
              - secrets
            verbs:
              - list
              - get
              - create
              - update
              - delete
              - patch


  cleanupController:
    serviceMonitor:
      enabled: true

  reportsController:
    serviceMonitor:
      enabled: true

  grafana:
    enabled: true

  crds:
    install: false

  existingImagePullSecrets: [ ]


policy-reporter:
  install: true

  logging:
    encoding: json

  # We explicitly remove all filters, since we want a complete dashboard
  sourceFilters: [ ]

  ui:
    enabled: true
    logging:
      encoding: json

  metrics:
    enabled: true

  monitoring:
    enabled: true


  plugin:
    kyverno:
      enabled: true
      logging:
        encoding: json


kyverno-policies:
  autogenControllers: none
  # -- Whether to install the default policies for kyverno
  install: true
  # -- The pod security standarcd as defined in https://kyverno.io/policies/pod-security.
  podSecurityStandard: "restricted"
  policyExclude:
    # Exclude kube-system deployments/replicasets since we can not change them
    disallow-host-path:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    disallow-capabilities:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    disallow-host-namespaces:
      any:
        - resources:
            kinds:
              - DaemonSet
              - Pod
            namespaces:
              - kube-system
    disallow-privileged-containers:
      any:
        - resources:
            kinds:
              - DaemonSet
              - Pod
            namespaces:
              - kube-system
    disallow-host-ports:
      any:
        - resources:
            kinds:
              - DaemonSet
              - Pod
            namespaces:
              - kube-system

    disallow-capabilities-strict:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    disallow-privilege-escalation:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    require-run-as-non-root-user:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    require-run-as-nonroot:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    restrict-seccomp-strict:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system
    restrict-volume-types:
      any:
        - resources:
            kinds:
              - Deployment
              - ReplicaSet
              - Pod
            namespaces:
              - kube-system


prependCustomImageRegistry:
  # -- Enable or disable the policy globally
  enabled: false

  # -- The name of the policy
  name: prepend-image-registry

  # -- the target image repository that should be prepended
  registry: "mysecure-registry.example.com"

  # -- a list of registries that should be skipped when mangling the image reference
  excludeRegistries: [ ]

  # -- Exclude the policy on the given list of namespaces
  # Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  excludeNamespaces: [ ]


# Replace all registries and force to go through a specific one. Often functions as a pull through cache proxy
replaceImageRegistry:
  # -- Enable or disable the policy globally
  enabled: false

  # -- The name of the policy
  name: replace-image-registry

  # -- source regex for matching it. Needs to be golang compatible
  sourceRegex: "'^(.*/)?(.*:?.*)$'"

  # -- the target image repository
  target: "mysecure-registry/common-signed-docker-images"

  # -- Excludes images from the replacement. Wildcard * is supported
  excludeRegistries:
  #  - "docker.io/something/*"

# Settings for the policy which verifies if images from specific sources are signed.
disallowUnsignedImages:
  # -- Enable or disable the policy globally
  enabled: false

  # -- The name of the policy
  name: disallow-unsigned-images

  # kyverno - webhookConfiguration.timeoutSeconds
  timeoutSeconds: "30"

  # FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.
  # Possible values:
  # "Ignore" - will allow failing calls to image registries to be ignored.
  # "Fail" - will fail the call to the api-server.
  failurePolicy: "Ignore"

  # A list of images and public key pairs.
  #
  # The image has to be a fully qualified path to the image(s).
  # You need to prepend always the registry.
  #
  # GOOD: This will work docker.io/iits/*
  # BAD: This will not work iits/*
  #
  # The same needs to be done for a gitlab registry, for the GitHub container registry etc.
  #
  # The image(s) will be verified with the given public key.
  #
  # Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  # -- List of image definitions and the associated public key used for signing.
  imagesAndPublicKeyPairs:
    - image: "*"
      #pullSecret:
      #ignoreTransparencyLog: true
      key: |-
        -----BEGIN PUBLIC KEY-----
        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXzV8f2YUEmXF176k//uSmgEEZoKb
        g2b7+PuoKjfaYVw3HTAE2Z4ak5ZNNq5HF8G1cRt3P713MyuIXiNKP6v2Nw==
        -----END PUBLIC KEY-----

  # -- Exclude the policy on the given list of namespaces
  # Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  excludeNamespaces:
  #- namespace

# Only allow images coming from a specific list of registries
disallowUnspecifiedDockerRegistries:
  # -- Enable or disable the policy globally
  enabled: false

  # -- The name of the policy
  name: disallow-unspecified-docker-registries

  # -- List of allowed registries. Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  allowedRegistries:
    - "mysecure-registry/common-signed-docker-images/*"

  # -- How policy violation should be handled. Use either `enforce` or `audit`. See https://kyverno.io/docs/writing-policies/validate/ for details
  # If a policy is violated and the action is "enforce", then the ressource will not be allowed
  # to be created. On the other the `audit` action allows the ressource but reports this incident.
  validationAction: "Enforce"

  # -- Exclude the policy on the given list of namespaces
  # Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  excludeNamespaces:
  # - my-namespace

enforceSecurityContext:

  # -- Enable or disable the policy globally
  enabled: false

  # -- The name of the policy
  name: enforce-security-context

  # -- Exclude the policy on the given list of namespaces
  # Wildcards are supported.
  # For more information check out: https://kyverno.io/docs/writing-policies/validate/#wildcards
  excludeNamespaces:
  # - my-namespace

autoInjectDockerPullSecrets:
  enabled: true

  secrets:
#    gitlab:
#      username: "access_token"
#      password: "token or password"
#      registryUrl: "registry.gitlab.com"
#    github:
#      username: "token_name"
#      password: "token or password"
#      registryUrl: "myregistry"

disallowEmptyIngressHost:
  enabled: true

  excludeNamespaces:
  #- name: ingressname
  #  namespace: namespace


ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: "routing-oidc-forward-auth@kubernetescrd, {{ .Release.Namespace }}-strip-prefix-{{ .Release.Name }}@kubernetescrd"

  # --(String) Required, set the domain you want to serve the UI from
  host:

  rules:
    - host: "{{ .Values.ingress.host }}"
      paths:
        - path: "/policies"
        - path: "/_nuxt"

