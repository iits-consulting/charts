{{- with .Values.replaceImageRegistry }}
{{- if .enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{.name}}
  annotations:
    policies.kyverno.io/title: Replace Image Registry
    policies.kyverno.io/category: DockerImage
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.6.0
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/description: >-
      We rewrite every third party docker registry to `{{.target}}`.
      If the image does not exist there it can not be deployed.

      Since we have also business apps you can also exclude registries from the replacement.

      The pulls are directed to a approved registry. In some cases, those registries may function as
      pull-through proxies and can fetch the image if not cached.
      This policy mutates all images either in the form 'image:tag' or
      'registry.corp.com/image:tag' to be `{{ .target | trimSuffix "/" }}/image:tag`.
      Note that this mutates Pods directly and not their controllers. It can be changed if desired but
      if so may need to not match on Pods.
spec:
  background: false
  useServerSideApply: true
  rules:
    - name: {{ .name }}-containers
      match:
        any:
          - resources:
              operations:
                - CREATE # spec.containers cannot be modified on UPDATE
              kinds:
                - Pod
      mutate:
        foreach:
          - list: "request.object.spec.containers"
            preconditions:
              all:
                {{- range $excludeRegistry := .excludeRegistries}}
                - key: "{{`{{element.image}}`}}"
                  operator: NotEquals
                  value: "{{ $excludeRegistry }}"
                {{- end }}
            patchStrategicMerge:
              metadata:
                annotations:
                  +(clusterpolicies.kyverno.io/{{ .name }}): "Replaced the containers image registry with {{ .target }}"
              spec:
                containers:
                  - name: "{{`{{ element.name }}`}}"
                    image: "{{ `{{ regex_replace_all(` }} {{ .sourceRegex }} {{ `, '{{ element.image }}', '` }}{{ .target | trimSuffix "/" }}{{ `/$2' )}}` }}"
    - name: {{ .name }}-initContainers
      match:
        any:
          - resources:
              operations:
                - CREATE # spec.initContainers cannot be modified on UPDATE
              kinds:
                - Pod
      preconditions:
        all:
          - key: "{{`{{ request.object.spec.initContainers[] || `}}`[]`{{` | length(@) }}`}}"
            operator: GreaterThanOrEquals
            value: 1
      mutate:
        foreach:
          - list: "request.object.spec.initContainers"
            preconditions:
              all:
                {{- range $excludeRegistry := .excludeRegistries}}
                - key: "{{`{{element.image}}`}}"
                  operator: NotEquals
                  value: "{{ $excludeRegistry }}"
                {{- end }}
            patchStrategicMerge:
              metadata:
                annotations:
                  +(clusterpolicies.kyverno.io/{{ .name }}-initContainers): "Replaced the initContainers image registry with {{ .target }}"
              spec:
                initContainers:
                  - name: "{{`{{ element.name }}`}}"
                    image: "{{ `{{ regex_replace_all(` }} {{ .sourceRegex }} {{ `, '{{ element.image }}', '` }}{{ .target | trimSuffix "/" }}{{ `/$2' )}}` }}"
    - name: {{ .name }}-ephemeralContainers
      match:
        any:
          - resources:
              operations:
                - UPDATE #ephemeralContainers cannot be specified on CREATE
              kinds:
                - Pod
      preconditions:
        all:
          - key: "{{`{{ request.object.spec.ephemeralContainers[] || `}}`[]`{{` | length(@) }}`}}"
            operator: GreaterThanOrEquals
            value: 1
      mutate:
        foreach:
          - list: "request.object.spec.ephemeralContainers"
            preconditions:
              all:
                {{- range $excludeRegistry := .excludeRegistries}}
                - key: "{{`{{element.image}}`}}"
                  operator: NotEquals
                  value: "{{$excludeRegistry}}"
                {{- end }}
            patchStrategicMerge:
              metadata:
                annotations:
                  +(clusterpolicies.kyverno.io/{{ .name }}-ephemeralContainers): "Replaced the ephemeralContainers image registry with {{ .target }}"
              spec:
                ephemeralContainers:
                  - name: "{{`{{ element.name }}`}}"
                    image: "{{ `{{ regex_replace_all(` }} {{ .sourceRegex }} {{ `, '{{ element.image }}', '` }}{{ .target | trimSuffix "/" }}{{ `/$2' )}}` }}"

---
{{- end }}
{{- end }}
