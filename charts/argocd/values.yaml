argo-cd:
  fullnameOverride: "argocd"

  controller:
    kind: StatefulSet
    replicaCount: 2
    extraEnvVars:
      - name: "TZ"
        value: "Europe/Berlin"
    logFormat: "json"
    resourcesPreset: "medium"
  dex:
    enabled: false
  notifications:
    enabled: false
  repoServer:
    replicaCount: 2
    extraEnvVars:
      - name: "TZ"
        value: "Europe/Berlin"
    logFormat: "json"
    resourcesPreset: "small"
    containerSecurityContext:
      seccompProfile:
        type: Unconfined
  server:
    replicaCount: 2
    ingress:
      enabled: true
      hostname: "SET_BY_TERRAFORM"
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
      path: "/argocd"
    extraEnvVars:
      - name: "TZ"
        value: "Europe/Berlin"

      # There is no need to specify ARGOCD_SERVER_BASEHREF, as that would only change the UI path, which is done by setting ARGOCD_SERVER_ROOTPATH
      # ARGOCD_SERVER_BASEHREF changes UI path only
      # ARGOCD_SERVER_ROOTPATH changes UI + API path
      - name: "ARGOCD_SERVER_ROOTPATH"
        # If we are serving on the root '/' this variable needs to be either non-existent or empty for the argo-server to respond properly.
        # Relevant if you want to serve argo on a dedicated sub-domain i.e. argo.example.com
        value: "{{ $path := .Values.server.ingress.path }}{{ if ($path | ne \"/\") }}{{ $path }}{{ end }}"

    logFormat: json
    insecure: true

    config:
      url: "https://{{ .Values.server.ingress.hostname }}{{ .Values.server.ingress.path }}"

      oidc.config: |
        name: OIDC
        issuer: $argocd-oidc:oidcURL
        clientID: $argocd-oidc:clientID
        clientSecret: $argocd-oidc:clientSecret
        requestedScopes:
          - openid
          - profile
          - email
          - groups
        requestedIDTokenClaims:
          groups:
            essential: true

      resource.customizations: |
        # Ignores .data changes of all secrets with a vaultInjectionChecksum annotation
        argoproj.io/Application:
         ignoreDifferences: |
            jqPathExpressions:
              - '. | select(.metadata.annotations.parametersChecksum) | .spec.source.helm'
              - '. | select(.metadata.annotations.valueFileChecksum) | .spec.source.helm'
        # Ignores caBundle and template changes of the following resources
        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jqPathExpressions:
              - .metadata.annotations.template
              - '.webhooks'
        apiextensions.k8s.io/CustomResourceDefinition:
          ignoreDifferences: |
            jqPathExpressions:
              - .spec.conversion.webhookClientConfig.caBundle
        admissionregistration.k8s.io/ValidatingWebhookConfiguration:
          ignoreDifferences: |
            jqPathExpressions:
              - .metadata.annotations.template
              - '.webhooks[]?.clientConfig.caBundle'
              - '.webhooks'
        cert-manager.io/Certificate:
          ignoreDifferences: |
            jqPathExpressions:
              - .spec.duration
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs

  config:
    rbac:
      policy.csv: |
        g, ARGOCD-ADMIN, role:admin
        g, SYSTEM-ADMINISTRATOR, role:admin

# Please use argocd-secret chart instead if you are using keycloak deployed in the same stage to avoid cyclic dependencies.
#    secret:
