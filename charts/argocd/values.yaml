argo-cd:
  controller:
    replicas: 2
    env:
      - name: "TZ"
        value: "Europe/Berlin"
      - name: "ARGOCD_GPG_ENABLED"
        value: "false"
    logFormat: "json"
  crds:
    install: "true"
  dex:
    env:
      - name: "TZ"
        value: "Europe/Berlin"
      - name: "ARGOCD_GPG_ENABLED"
        value: "false"
    logFormat: "json"
  notifications:
    enabled: "false"
  repoServer:
    env:
      - name: "TZ"
        value: "Europe/Berlin"
      - name: "ARGOCD_GPG_ENABLED"
        value: "false"
    logFormat: "json"
    containerSecurityContext:
      seccompProfile:
        type: Unconfined
  server:
    env:
      - name: "TZ"
        value: "Europe/Berlin"
      - name: "ARGOCD_GPG_ENABLED"
        value: "false"
    extraArgs:
      - "--insecure"
      - "--rootpath=/argocd"
      - "--basehref=/argocd"
    logFormat: json
# List of projects which you want to bootstrap
projects:
## bootstraps infrastructure related charts like traefik, elastic-stack...
#  infrastructure-charts:
## values which are handed over to the infrastructure-charts project like this you can for example give over information from terraform to argocd
#    projectValues:
#      # Set this to enable stage values.yaml
#      stage:
#    # defaults to false
#    serverSideApply:
#    # information about the git repo which should be bootstrapped
#    git:
#      # defaults to ARGOCD_GIT_ACCESS_TOKEN
#      username:
#      password: "SET_BY_TERRAFORM"
#      repoUrl: "SET_BY_TERRAFORM"
#      # defaults to main
#      branch:
#      # defaults to project name
#      path:
#      repoPrivateKeyBase64Encoded:
#
#    # helm registries credentials
#    helmRegistries:
#      infraRegistry:
#        # defaults to map key
#        name: ""
#        password: "SET_BY_TERRAFORM"
#        url: "SET_BY_TERRAFORM"
#        # defaults to ARGOCD_GIT_ACCESS_TOKEN
#        username:
#
#    # defaults to *
#    allowedUrls: