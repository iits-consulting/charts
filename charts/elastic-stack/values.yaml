ingressRoute:
  adminDomain: "admin.my-domain.com"
  entryPointName: "after-proxy"
#cce:
#  elasticsearch:
#    region: "eu-de"
#    storageClassName: "ssd-encrypted"
#    volumeType: "SSD"
#    volumes:
# -- Required
#      - id:
# -- Required
#        az:
# -- Required
#        kmsId:
# -- Required
#      - id:
# -- Required
#        az:
# -- Required
#        kmsId:

elasticsearch:
  protocol: http
  createCert: false
  updateStrategy: RollingUpdate
  enabled: true
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 200G
  esJavaOpts: "-Xmx6g -Xms6g -Dlog4j2.formatMsgNoLookups=true -Des.allow_insecure_settings=true"
  resources:
    requests:
      cpu: "200m"
      memory: "6G"
    limits:
      cpu: "1000m"
      memory: "8G"
  replicas: 2
  esConfig:
    elasticsearch.yml: |
      cluster.name: "docker-cluster"
      network.host: 0.0.0.0
      http.max_header_size: 16kb
      cluster.max_shards_per_node: 30000
      xpack.security:
        enabled: false
        http.ssl.enabled: false
        transport.ssl.enabled: false
        authc:
          anonymous:
            username: anonymous
            roles: superuser
            authz_exception: false

filebeat:
  enabled: true
  daemonset:
    secretMounts: []
    extraVolumes:
      - name: varlibcontainerdcontainerlogs
        hostPath:
          path: /var/lib/containerd/container_logs
    extraVolumeMounts:
      - name: varlibcontainerdcontainerlogs
        mountPath: /var/lib/containerd/container_logs

  readinessProbe:
    failureThreshold: 50
    initialDelaySeconds: 20
    periodSeconds: 30
    timeoutSeconds: 10
  resources:
    requests:
      cpu: "100m"
      memory: "100M"
    limits:
      cpu: "400m"
      memory: "500M"
  filebeatConfig:
    filebeat.yml: |
      setup:
        ilm:
          enabled: false
      filebeat.autodiscover:
        providers:
          - type: kubernetes
            hints.enabled: true
            hints.default_config:
              type: container
              paths:
                - /var/log/containers/*${data.container.id}.log
            node: ${NODE_NAME}
      processors:
        - add_kubernetes_metadata: ~
        - decode_json_fields:
            when:
               has_fields: ["message"]
            fields: ["message"]
            target: ""
            overwrite_keys: true
        - decode_json_fields:
            when:
               has_fields: ["msg"]
            fields: ["msg"]
            target: ""
            overwrite_keys: true
        - add_labels:
            labels:
              stage: {{.Values.projectValues.stage}}
        - drop_event:
            when:
              or:
              - equals:
                  kubernetes.labels.app: "kibana"
              - equals:
                  kubernetes.labels.app: "grafana"
              - equals:
                  kubernetes.labels.app: "prometheus-stack-operator"
              - equals:
                  kubernetes.labels.app: "elasticsearch-master"
              - equals:
                  kubernetes.labels.app: "botkube"
              - equals:
                  kubernetes.labels.app: "prometheus"
              - equals:
                  msg: "no session found in request, redirecting for authorization"
              - equals:
                  kubernetes.container.name: "kube-state-metrics"
              - equals:
                  kubernetes.container.name: "filebeat"
              - equals:
                  kubernetes.container.name: "traefik-admin-dashboard"
              - equals:
                  kubernetes.container.name: portal
              - equals:
                  kubernetes.container.name: repo-server
              - equals:
                  kubernetes.container.name: argocd-notifications-controller
              - equals:
                  kubernetes.container.name: application-controller
              - equals:
                  kubernetes.namespace: kube-system
              - equals:
                  kubernetes.labels.component: registry
              - equals:
                  RequestPath: "/ping"
              - equals:
                  RouterName: "kibana@file"
              - equals:
                  message: "200 OK: GET - /public/api/health"
              - contains:
                  message: "vault-sealed-check\" does not have associated TTL"
              - contains:
                  message: "Error while renaming Node ID"
              - contains:
                  message: "pkg/mod/k8s.io/client-go@v0.17.0/tools/cache/reflector.go:108"
              # NGINX Ingress
              - contains:
                  message: "TCP 200 0 0"
              # Vault logs
              - equals:
                  auth.metadata.role_name: gitlab
              - equals:
                  auth.metadata.role_name: banzai-webhook-role
              - equals:
                  app: vault-secrets-webhook
              - contains:
                  message: "agent.server: member joined, marking health alive:"
      output.elasticsearch:
        hosts: '["${ELASTICSEARCH_HOSTS:elasticsearch-master:9200}"]'
        protocol: http
        indices:
            - index: "traefik-and-keycloak-proxy-%{[agent.version]}-%{+yyyy.MM}"
              when:
                or:
                 - equals:
                    kubernetes.namespace: "routing"
            - index: "vault-%{[agent.version]}-%{+yyyy.MM}"
              when:
                and:
                - equals:
                   kubernetes.namespace: "vault"
            - index: "argocd-%{[agent.version]}-%{+yyyy.MM.DD}"
              when:
                or:
                 - equals:
                    kubernetes.namespace: "argocd"
            - index: "elastalert-%{[agent.version]}-%{+yyyy.MM.DD}"
              when:
                or:
                 - equals:
                    kubernetes.container.name: "elastalert2"
            - index: "kyverno-%{[agent.version]}-%{+yyyy.MM.DD}"
              when:
                or:
                 - equals:
                    kubernetes.namespace: "kyverno"
            - index: "auth-%{[agent.version]}-%{+yyyy.MM.DD}"
              when:
                or:
                 - equals:
                    kubernetes.namespace: "auth"      
            - index: "not-defined-%{[agent.version]}-%{+yyyy.MM}"
      setup.kibana:
        host: "elastic-stack-kibana:5601"
        protocol: "http"

kibana:
  enabled: true
  replicas: 2
  image: "docker.elastic.co/kibana/kibana"
  imageTag: "8.5.1"
  kibanaConfig:
    kibana.yml: |
      server:
        name: kibana
        host: "localhost"
        basePath: "/kibana"
      elasticsearch.hosts: [ "http://elasticsearch:9200" ]
      monitoring.ui.container.elasticsearch.enabled: true
      xpack:
        reporting:
          csv.maxSizeBytes: 1048576000
          queue.timeout: 1800000
          kibanaServer.hostname: localhost
          encryptionKey: "2r6QH87Y3tJP9JkNqaM!w9&zQBO6p&M%"
        security.encryptionKey: "2r6QH87Y3tJP9JkNqaM!w9&zQBO6p&M%"
        encryptedSavedObjects.encryptionKey: "2r6QH87Y3tJP9JkNqaM!w9&zQBO6p&M%"

  service:
    type: ClusterIP
    port: 5601
    annotations: { }

indexPatternInit:
  image:
    repository: docker.io/curlimages/curl
    tag: 7.82.0
  indices:
    botkube:
      timestampField: "Timestamp"
    traefik-and-keycloak-proxy:
      timestampField: "@timestamp"
    vault:
      timestampField: "@timestamp"
    argocd:
      timestampField: "@timestamp"
    auth:
      timestampField: "@timestamp"
    elastalert:
      timestampField: "@timestamp"
    kyverno:
      timestampField: "@timestamp"
    not-defined:
      timestampField: "@timestamp"

ilm:
  image:
    repository: docker.io/curlimages/curl
    tag: 7.82.0
  policies:
    long:
      #business apps and security relevant logs
      indexPatterns: [ "vault*" ]
      coldAfter: 32d
      deleteAfter: 365d
    medium:
      indexPatterns: [ "not-defined*", "traefik-and-keycloak-proxy*", "auth*" ]
      coldAfter: 32d
      deleteAfter: 90d
    short:
      indexPatterns: [ "elastalert*", "argocd*", "kyverno*" ]
      coldAfter: 2d
      deleteAfter: 14d

backup:
  image:
    repository: docker.io/curlimages/curl
    tag: 7.82.0
  repoName: "s3_backups"
  bucket:
    endpoint: "https://obs.eu-de.otc.t-systems.com"
    # -- Required
    name:
    # -- Required
    accessKey:
    # -- Required
    secretKey:
  policy:
    name: "nightly-backup"
    schedule: "0 0 0 * * ?"
#    indices can also be set to a list such as [ "data-*", "important" ]
    indices: [ "*" ]
    retention:
      expireAfter: "15d"
      minCount: 5
      maxCount: 15

ingress:
  enabled: true
  # -- Required, replace it with your host address
  host:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: "{{.Release.Namespace}}-strip-prefix-{{ .Release.Name }}@kubernetescrd, routing-oidc-forward-auth@kubernetescrd"
  # Creates default Ingress with tls and the given host from .Values.ingress.host
  defaultIngress:
    enabled: true
    ## Default values can be overriden
    #tls:
    #  secretName: "elastic-stack.fullname"
    path: "/kibana"
    #pathType: "Prefix"
    backend:
      name: "{{.Release.Name}}-kibana" #tpl supported
    #  port:
    #    name: http #tpl supported

  ## If you don't want to use the default Ingress, you can define it here on your own
  #tls:
  #  - hosts:
  #      - "{{.Values.ingress.host}}"
  #    secretName: "elastic-stack-cert"
  #hosts:
  #  - host: "{{.Values.ingress.host}}"
  #    paths:
  #      - path: "/"
  #        backend:
  #         name: "{{include "elastic-stack.fullname" $}}"
  #         port:
  #            name: "{{include "elastic-stack.fullname" $}}"